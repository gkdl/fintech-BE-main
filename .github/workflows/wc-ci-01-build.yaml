on:
  workflow_call:
    inputs:
      app:
        type: string

jobs:
  gradle-build:
    name: "🐘build"
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4.6.0
        with:
          distribution: 'corretto'
          java-version: '21'
          cache: 'gradle'

      - name: Cache Gradle packages
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew ${{ inputs.app }}:clean ${{ inputs.app }}:build

      - name: Build with Gradle and save image
        if: ${{ github.event_name == 'push' }}
        run: |
          ./gradlew ${{ inputs.app }}:bootBuildImage
          docker save ${{ inputs.app }}:latest > ${{ inputs.app }}-image.tar

      - name: Upload image artifact
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v4.5.0
        with:
          name: docker-image-${{ inputs.app }}
          path: ${{ inputs.app }}-image.tar

  image-push:
    if: ${{ github.event_name == 'push' }}
    needs:
      - gradle-build
    name: "🐳push"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ inputs.app }}

      - name: Load Docker image
        run: docker load < ${{ inputs.app }}-image.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pay200
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker tag ${{ inputs.app }}:latest $ECR_REGISTRY/$ECR_REPOSITORY/${{ inputs.app }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY/${{ inputs.app }}:$IMAGE_TAG
          echo "$IMAGE_TAG" >> ${{ inputs.app }}-image-tag.txt

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: ${{ inputs.app }}-image-tag
          path: ${{ inputs.app }}-image-tag.txt
